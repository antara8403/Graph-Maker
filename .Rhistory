layout(title = input$title_graph)
} else if (input$graph_type == "Histogram") {
plot_ly(data(), x = ~data()[, input$x_axis], type = "histogram") %>%
layout(title = input$title_graph)
}
})
}
# Run the Shiny app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
# App title with images
titlePanel(
h1(
img(src = "app_img.png", height = 90, width = 269),
strong("Graph Maker"),
img(src = "app_img2.png", height = 90, width = 100)
)
),
style = "background-color: #CDD7DD;",                                    #CDD7DD
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
style = "background-color:#31B698;",                   # 31B698 #33FFD4 #efdda7 #dc9b58
# File input for uploading data
fileInput("file", "Choose File", accept = c(".csv", "xlsx")),
# Select input for graph type
selectInput("graph_type", "Select Graph Type",
choices = c("Scatter Plot", "Bar Chart", "Line Chart", "Histogram")),
# Select input for X-axis variable
selectInput("x_axis", "Select X-Axis", NULL),
# Conditional panel for Y-axis variable based on graph type
conditionalPanel(
condition = "input.graph_type != 'Histogram'",
selectInput("y_axis", "Select Y-Axis", NULL)
),
# Text input for graph title
textInput('title_graph', 'Write a Title for the Graph'),
),
# Main panel for displaying outputs
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Data", tableOutput("head")),
tabPanel("Plot", plotlyOutput("graph1"))
)
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive function to read data from file
data <- reactive({
req(input$file)
read.csv(input$file$datapath)
})
# Update X-axis and Y-axis choices based on uploaded data
observeEvent(data(), {
updateSelectInput(session, "x_axis", choices = names(data()))
updateSelectInput(session, "y_axis", choices = names(data()))
})
# Render data table
output$head <- renderTable({
head(data())
})
# Render selected plot
output$graph1 <- renderPlotly({
req(input$x_axis)
# Choose the appropriate type of plot based on user input
if (input$graph_type == "Scatter Plot") {
plot_ly(data(), x = ~data()[, input$x_axis], y = ~data()[, input$y_axis], type = "scatter", mode = "markers") %>%
layout(title = input$title_graph)
} else if (input$graph_type == "Bar Chart") {
plot_ly(data(), x = ~data()[, input$x_axis], y = ~data()[, input$y_axis], type = "bar") %>%
layout(title = input$title_graph)
} else if (input$graph_type == "Line Chart") {
plot_ly(data(), x = ~data()[, input$x_axis], y = ~data()[, input$y_axis], type = "scatter", mode = "lines") %>%
layout(title = input$title_graph)
} else if (input$graph_type == "Histogram") {
plot_ly(data(), x = ~data()[, input$x_axis], type = "histogram") %>%
layout(title = input$title_graph)
}
})
}
# Run the Shiny app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
# App title with images
titlePanel(
h1(
img(src = "app_img.png", height = 90, width = 269),
img(src = "app_img2.png", height = 90, width = 100),
strong("Graph Maker"),
)
),
style = "background-color: #CDD7DD;",                                    #CDD7DD
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
style = "background-color:#31B698;",                   # 31B698 #33FFD4 #efdda7 #dc9b58
# File input for uploading data
fileInput("file", "Choose File", accept = c(".csv", "xlsx")),
# Select input for graph type
selectInput("graph_type", "Select Graph Type",
choices = c("Scatter Plot", "Bar Chart", "Line Chart", "Histogram")),
# Select input for X-axis variable
selectInput("x_axis", "Select X-Axis", NULL),
# Conditional panel for Y-axis variable based on graph type
conditionalPanel(
condition = "input.graph_type != 'Histogram'",
selectInput("y_axis", "Select Y-Axis", NULL)
),
# Text input for graph title
textInput('title_graph', 'Write a Title for the Graph'),
),
# Main panel for displaying outputs
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Data", tableOutput("head")),
tabPanel("Plot", plotlyOutput("graph1"))
)
)
)
)
# Define server
server <- function(input, output, session) {
# Reactive function to read data from file
data <- reactive({
req(input$file)
read.csv(input$file$datapath)
})
# Update X-axis and Y-axis choices based on uploaded data
observeEvent(data(), {
updateSelectInput(session, "x_axis", choices = names(data()))
updateSelectInput(session, "y_axis", choices = names(data()))
})
# Render data table
output$head <- renderTable({
head(data())
})
# Render selected plot
output$graph1 <- renderPlotly({
req(input$x_axis)
# Choose the appropriate type of plot based on user input
if (input$graph_type == "Scatter Plot") {
plot_ly(data(), x = ~data()[, input$x_axis], y = ~data()[, input$y_axis], type = "scatter", mode = "markers") %>%
layout(title = input$title_graph)
} else if (input$graph_type == "Bar Chart") {
plot_ly(data(), x = ~data()[, input$x_axis], y = ~data()[, input$y_axis], type = "bar") %>%
layout(title = input$title_graph)
} else if (input$graph_type == "Line Chart") {
plot_ly(data(), x = ~data()[, input$x_axis], y = ~data()[, input$y_axis], type = "scatter", mode = "lines") %>%
layout(title = input$title_graph)
} else if (input$graph_type == "Histogram") {
plot_ly(data(), x = ~data()[, input$x_axis], type = "histogram") %>%
layout(title = input$title_graph)
}
})
}
# Run the Shiny app
shinyApp(ui, server)
if (input$plot_type == 'histogram'){
plot_ly(data = data(),
x = ~get(xvar),
type = input$plot_type) %>%
layout(title = input$title_graph,
xaxis = list(title = xvar))
} else{
plot_ly(data = data(),
x = ~get(xvar),
y = ~get(yvar),
type = input$plot_type) %>%
layout(title = input$title_graph,
xaxis = list(title = xvar),
yaxis = list(title = yvar))
}
# Display graph
output$ploti <- renderPlotly({
xvar <- input$varx
yvar <- input$vary
if (input$plot_type == 'histogram'){
plot_ly(data = data(),
x = ~get(xvar),
type = input$plot_type) %>%
layout(title = input$title_graph,
xaxis = list(title = xvar))
} else{
plot_ly(data = data(),
x = ~get(xvar),
y = ~get(yvar),
type = input$plot_type) %>%
layout(title = input$title_graph,
xaxis = list(title = xvar),
yaxis = list(title = yvar))
}
})
library(shiny)
library(plotly)
library(readxl)
ui <- fluidPage(
style = "background-color: green;",,
titlePanel('Final Server Assignment') ,
sidebarLayout(
sidebarPanel(
tags$style(".well {background-color: #A52A2A;}") ,
fileInput("upload1", "Upload a file please") ,
selectInput('plot_type',
' select your plot type',
choices = c(
'box',
'scatter',
'histogram'
)),
selectInput('varx',
'Select the x variable',
choices = NULL),
conditionalPanel(
condition = "input.plot_type != 'histogram'",
selectInput('vary',
'Select the y variable',
choices = NULL)
)
,
textInput('title_graph', 'write a title for the graph') ,
img(src='nice_pic.png', align="Left"),
),
mainPanel (
tabsetPanel (
tabPanel('Data' ,
tableOutput('my_data')) ,
tabPanel ('Graph',
plotlyOutput('ploti')
)))))
install.packages("shinyWidgets")
library(shinyWidgets)
ui <- fluidPage(
style = "background-color: green;",,
titlePanel('Final Server Assignment') ,
sidebarLayout(
sidebarPanel(
tags$style(".well {background-color: #A52A2A;}") ,
fileInput("upload1", "Upload a file please") ,
selectInput('plot_type',
' select your plot type',
choices = c(
'box',
'scatter',
'histogram'
)),
selectInput('varx',
'Select the x variable',
choices = NULL),
conditionalPanel(
condition = "input.plot_type != 'histogram'",
selectInput('vary',
'Select the y variable',
choices = NULL)
)
,
textInput('title_graph', 'write a title for the graph') ,
img(src='nice_pic.png', align="Left"),
),
mainPanel (
tabsetPanel (
tabPanel('Data' ,
tableOutput('my_data')) ,
tabPanel ('Graph',
plotlyOutput('ploti')
)))))
server <- function(input, output, session) {
data <- reactive({
req(input$upload1)
ext <- tools::file_ext(input$upload1$name)
switch(ext,
csv = vroom::vroom(input$upload1$datapath, delim = ","),
tsv = vroom::vroom(input$upload1$datapath, delim = "\t"),
xlsx = readxl::read_excel(input$upload1$datapath),
validate("Invalid file; Please upload a .csv or .tsv or xlsx file")
)
})
observeEvent(input$upload1, {
updateSelectInput(session,
'varx' ,
choices = names(data()))
updateSelectInput(session,
'vary' ,
choices = names(data()))
})
# Display data
output$my_data <- renderTable({ data() })
# Display graph
output$ploti <- renderPlotly({
xvar <- input$varx
yvar <- input$vary
if (input$plot_type == 'histogram'){
plot_ly(data = data(),
x = ~get(xvar),
type = input$plot_type) %>%
layout(title = input$title_graph,
xaxis = list(title = xvar))
} else{
plot_ly(data = data(),
x = ~get(xvar),
y = ~get(yvar),
type = input$plot_type) %>%
layout(title = input$title_graph,
xaxis = list(title = xvar),
yaxis = list(title = yvar))
}
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
library(readxl)
library(shinyWidgets)
ui <- fluidPage(
style = "background-color: green;",,
titlePanel('Final Server Assignment') ,
sidebarLayout(
sidebarPanel(
tags$style(".well {background-color: #A52A2A;}") ,
fileInput("upload1", "Upload a file please") ,
selectInput('plot_type',
' select your plot type',
choices = c(
'box',
'scatter',
'histogram'
)),
selectInput('varx',
'Select the x variable',
choices = NULL),
conditionalPanel(
condition = "input.plot_type != 'histogram'",
selectInput('vary',
'Select the y variable',
choices = NULL)
)
,
textInput('title_graph', 'write a title for the graph') ,
img(src='nice_pic.png', align="Left"),
),
mainPanel (
tabsetPanel (
tabPanel('Data' ,
tableOutput('my_data')) ,
tabPanel ('Graph',
plotlyOutput('ploti')
)))))
server <- function(input, output, session) {
data <- reactive({
req(input$upload1)
ext <- tools::file_ext(input$upload1$name)
switch(ext,
csv = vroom::vroom(input$upload1$datapath, delim = ","),
tsv = vroom::vroom(input$upload1$datapath, delim = "\t"),
xlsx = readxl::read_excel(input$upload1$datapath),
validate("Invalid file; Please upload a .csv or .tsv or xlsx file")
)
})
observeEvent(input$upload1, {
updateSelectInput(session,
'varx' ,
choices = names(data()))
updateSelectInput(session,
'vary' ,
choices = names(data()))
})
# Display data
output$my_data <- renderTable({ data() })
# Display graph
output$ploti <- renderPlotly({
xvar <- input$varx
yvar <- input$vary
if (input$plot_type == 'histogram'){
plot_ly(data = data(),
x = ~get(xvar),
type = input$plot_type) %>%
layout(title = input$title_graph,
xaxis = list(title = xvar))
} else{
plot_ly(data = data(),
x = ~get(xvar),
y = ~get(yvar),
type = input$plot_type) %>%
layout(title = input$title_graph,
xaxis = list(title = xvar),
yaxis = list(title = yvar))
}
})
}
shinyApp(ui, server)
runApp('Final UI Submission 2_Group 9.R')
library(shiny)
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('Final UI Submission 2_Group 9 (Whole Code).R')
runApp('Final UI Submission 2_Group 9 (Whole Code).R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Final UI Submission 3_Group 9 (Whole Code).R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Final UI Submission 3_Group 9 (Whole Code).R')
runApp('Final UI Submission 2_Group 9 (Whole Code).R')
runApp('Final UI Submission 2_Group 9 (Whole Code).R')
runApp()
library(shiny)
library(plotly)
# Define UI
ui <- fluidPage(
# App title with images
titlePanel(
h1(
img(src = "app_img.png", height = 90, width = 269),
img(src = "app_img2.png", height = 90, width = 100),
strong("Graph Maker"),
)
),
style = "background-color: #CDD7DD;",                                    #CDD7DD
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
style = "background-color:#31B698;",                   # 31B698 #33FFD4 #efdda7 #dc9b58
# File input for uploading data
fileInput("file", "Choose File", accept = c(".csv", "xlsx")),
# Select input for graph type
selectInput("graph_type", "Select Graph Type",
choices = c("Scatter Plot", "Bar Chart", "Line Chart", "Histogram")),
# Select input for X-axis variable
selectInput("x_axis", "Select X-Axis", NULL),
# Conditional panel for Y-axis variable based on graph type
conditionalPanel(
condition = "input.graph_type != 'Histogram'",
selectInput("y_axis", "Select Y-Axis", NULL)
),
# Text input for graph title
textInput('title_graph', 'Write a Title for the Graph'),
),
# Main panel for displaying outputs
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Data", tableOutput("head")),
tabPanel("Plot", plotlyOutput("graph1"))
)
)
)
# Define server
server <- function(input, output, session) {
# Define UI
ui <- fluidPage(
# App title with images
titlePanel(
h1(
img(src = "app_img.png", height = 90, width = 269),
img(src = "app_img2.png", height = 90, width = 100),
strong("Graph Maker"),
)
),
style = "background-color: #CDD7DD;",                                    #CDD7DD
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
style = "background-color:#31B698;",                   # 31B698 #33FFD4 #efdda7 #dc9b58
# File input for uploading data
fileInput("file", "Choose File", accept = c(".csv", "xlsx")),
# Select input for graph type
selectInput("graph_type", "Select Graph Type",
choices = c("Scatter Plot", "Bar Chart", "Line Chart", "Histogram")),
# Select input for X-axis variable
selectInput("x_axis", "Select X-Axis", NULL),
# Conditional panel for Y-axis variable based on graph type
conditionalPanel(
condition = "input.graph_type != 'Histogram'",
selectInput("y_axis", "Select Y-Axis", NULL)
),
# Text input for graph title
textInput('title_graph', 'Write a Title for the Graph'),
),
# Main panel for displaying outputs
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Data", tableOutput("head")),
tabPanel("Plot", plotlyOutput("graph1"))
)
)
)
# Define server
server <- function(input, output, session) {
shiny::runApp()
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Assignment -7 Shiny/Final UI Submission_Group 9.R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Final UI Submission_Group 92.R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Final UI Submission_Group 92.R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Assignment -7 Shiny/Final UI Submission_Group 93.R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Assignment -7 Shiny/Final UI Submission_Group 93.R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Assignment -7 Shiny/Final UI Submission_Group 93.R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Assignment -7 Shiny/Final UI Submission_Group 93.R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Final UI Submission_Group 9')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Final UI Submission_Group 9')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/UI Submission_Others.R')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Final UI Submission_Group 9')
runApp('C:/Users/prath/Desktop/Antara -Courses/Data Visualization - fall 2023/Final UI Submission_Group 9')
shiny::runApp()
